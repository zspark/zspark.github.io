author: Nancy
created: 20200102070827756
creator: Nancy
modified: 20200102131246885
modifier: Nancy
tags: essay C++
title: C++面试遇到的问题
type: text/vnd.tiddlywiki

!! 一、结构体求大小问题
```cpp
struct A1
{
    int a:4;
    int b:2;
    char c:1;
};
```
请问在32位系统中A1的内存大小。（类似的问题，我写的这个结构体内存大小应该为8）

!!!相关的问题：

!!!1）结构中的位字段

    与C语言一样，C++也允许指定占用特定位数的结构成员，这使得创建与某个硬件设备上的寄存器对应的数据结构非常方便。例如在存放一个开关量时，只有0和1两种状态，用一位二进位即可。字段的类型应为整型或枚举，接下来是冒号,冒号后面是一个数字，它指定了使用的位数。可以试用没有名称的字段来提供间距。每个成员都被称为位字段（bit field）。下面是一个例子：

```cpp
  struct   torgle_register
  {   
     unsigned int SN : 4;  // 4 bits for SN value
     unsigned int : 4;       // 4 bits for unused
     bool goolIn : 1;        // valid input (1 bit)
  };
```
    初始化、访问字段都和通常一样。


!!!2)结构体内存对齐：

      元素是按照定义顺序一个一个放到内存中去的，但并不是紧密排列的。从结构体存储的首地址开始，每个元素放置到内存中时，它都会认为内存是按照自己的大小来划分的，因此元素放置的位置一定会在自己宽度的整数倍上开始。 内存对齐主要是提高处理器访问内存的速度。

```cpp
struct stu1
{
　int i;
　char c;
　int j;
}；
```
      先介绍一个相关的概念——偏移量。''偏移量''指的是 ''结构体变量中成员的地址'' 和 ''结构体变量地址'' 的差。''结构体大小''等于 ''最后一个成员的偏移量'' 加上 ''最后一个成员的大小''。显然，结构体变量中第一个成员的地址就是结构体变量的首地址。因此，第一个成员i的偏移量为0。第二个成员c的偏移量是第一个成员的偏移量加上第一个成员的大小（0+4）,其值为4；第三个成员j的偏移量是第二个成员的偏移量加上第二个成员的大小（4+1）,其值为5。


      实际上，由于存储变量时地址对齐的要求，编译器在编译程序时会遵循两条原则：

             一、结构体变量中成员的偏移量必须是成员大小的整数倍（0被认为是任何数的整数倍） 
             二、结构体大小必须是所有成员大小的整数倍


!!!对齐参数：

64位系统，默认对齐数为8； 
32位系统，默认对齐数为4 
设置对齐参数可在结构体struct之前加上#pragma pack(对齐数)，在struct之后加上#pragma pack;便可以设置对齐参数。 
对齐参数不能任意设置，只能是内置类型已有的字节数，如：char(1)、short（2），int（4），double(8)…不能是3，5…任意数。

!!!相关例题
下面的结构体大小分别是多大（假设32位机器）？

```cpp
struct A {
char a;
char b;
char c;
};

struct B {
int a;
char b;
short c;
};

struct C {
char b;
int a;
short c;
};
pragma pack(2)

struct D {
char b;
int a;
short c;
};
```

结构体的大小问题在求解的时候要注意对齐：

A：对齐值为：1 。大小为：3
B：对齐值为：4 。 大小为：4+2+2 = 8（第一个4为int，第二个4为char 和 short ，要空余1个）
C：对齐值为：4。大小为：4+4+4 = 12（第一个为char ，空余3个，第二个为int ，第三个为char 空余3个）
D：指定对齐值为：2（使用了#pragma pack(2)） 。大小为2+4+2 = 8。（第一个char，空余1个，第二个为int ，4个，第3个位char，空余1个）。

!! 二、按位运算符
未完待续....
