created: 20190818115408332
creator: Jerry
modified: 20190818115753750
modifier: Jerry
tags: [[computer science]] Philosophy
title: My programming philosophy 2018
type: text/vnd.tiddlywiki


[img[img_coding.jpg]]

框架或者架构体现的是架构师从全局（产品需求、时间范围、技术可行性、可能招到的员工能力或现有员工能力，技术走向等等）角度考虑而定制的强烈的体现了架构师个人编程哲学的这么一个系统，普通开发者更多的是去遵守这么一个约定、约束从而配合整体架构的正确运行，而不是更多的去体现自我编程的个性。框架由于存在多方面的权衡肯定存在某一（某些）方面让开发者感觉“恶心”“别扭”“不方便”的地方，如果不约束自己，软件的开发与维护将会更容易走向“无框架”的状态，那肯定是一种混乱的状态：第三者不容易接手不容易阅读，因为ta可能更多的熟悉框架约束形成的开发方式；也可能因整体框架变动更容易产生意外。从另一方面来说当熟悉了架构师的设计理念后，开发者也会更加容易定位、排查问题，更大可能会将注意力集中于具体业务逻辑的开发上而不是想着怎么让自己越过约束从而方便自我。

      回到现实中来，每个人都会从生存的各个方面想着如何能改进、改善、方便自己，这无可厚非，是人的惰性。软件开发中势必存在对抗与权衡，想想android项目怎么开发的吧，100多个git仓库，怎么协作的！要想对抗几百几千人的超大型项目开发可能存在的非技术方面的问题，这无疑是门科学。程序员应该克制自己，更多的培养团队协作的开发能力。 

!!! 内存泄漏（Memory-leak）

      内存泄漏是指主观上，还是客观上的泄漏呢，还是两者都是？更或者有无如此的说法。下面是wiki的解释：

>In computer science, a memory leak is a type of resource leak that occurs when a computer program incorrectly manages memory allocations in such a way that memory which is no longer needed is not released. --- wiki

没有说主客观，显然就是两者都有。我这里将其分成主客观两种，主观上的内存泄漏是有申请与释放，但没有使用，这种情况很少，但就理论严密性而言探讨它是有必要的。比如我在main函数一开始申请了一片几个G的内存，直到main的return上一句才将其释放，期间没有被使用过；而客观上的内存泄漏就是只有申请没有释放，一是出于大意疏忽，二是怀抱“我就不释放”的心态，无论哪种，单就第三方阅读者而言都是没有释放。

 ¶ 
