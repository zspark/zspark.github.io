created: 20190827152338761
creator: Jerry
modified: 20200115124432492
modifier: Jerry
tags: Project
title: Duck
type: text/vnd.tiddlywiki

```cpp
template<typename T>
struct tpl_dkrange{
	T min;
	T max;
};

using tpl_dkrange<float> dkfrange01


class DKNonCopiable{
	public:
		DKNonCopiable(const DKNonCopiable&)=delete;
		DKNonCopiable* operater=(const DKNonCopiable&)=delete;
};

class DKFilm final:public DKBaseObject,public DKNonCopiable{
	public:
		DKFilm();
		DKFilm(dkuint,dkuint);
		~DKFilm();
		void SetSize(dkuint,dkuint);//zero means keep old value;

	private:
		friend DKCamera;
		dkuint m_nWidth{0u};
		dkuint m_hHeight{0u};
		DKBuffer* m_pBufferOutput{nullptr};
		//.. other buffers;
}

class DKBaseCamera:public DKBaseObject{
	public:
		void SetFOV(float);
		void SetNearPlaneDistance(float);
		void SetFarPlaneDistance(float);
		void BindFilm(DKFilm* f){
			m_ref_pFilm=f;
			//TODO:Jerry: some sort of width and height settings;
			if(f){
			}else{
			}
		}

	protected:
		virtual void _CalcMatrix()=0;
	private:
		float m_fFOV{60.0f};
		float m_fNearPlaneDistance{0.01f};
		float m_fFarPlaneDistance{10000000.0f};
		glm::Matrix4x4 m_matrixProjection;
		DKFilm* m_ref_pFilm{nullptr};
};

class DKOthroCamera:public DKBaseCamera{
	public:
		void _CalcMatrix()override;
};

class DKBaseLight:public DKBaseObject{
	public:
		DKBaseLight();
		virtual ~DKBaseLight();
		void SetIntensity(float);
		void SetGammaCorrection(float);
		virtual ELightType GetType()const =0;
	protected:
		float m_fIntensity{0.f};
		float m_fGammaCorrection{0.45f};
}

class DKPointLight:public DKBaseLight{
	public:
		DKPointLight();
		~DKPointLight();
		ELightType GetType()const override{return ELightType::POINT_LIGHT;}
		void SetColor(dkf4& c);
		void SetColor(float r,float g,float b,float a);
	private:
		dkf4 m_color{0.f,0.f,0.f,1.f};
}

class DKMaterial:public DKBaseObject{
	public:
		DKMaterial();
		~DKMaterial();
	private:
}

class DKGeometry:public DKBaseObject{
	public:
		DKGeometry();
		virtual ~DKGeometry();
	private:
}

class DKPointSet:public DKGeometry{
	public:
		DKPointSet();
		~DKPointSet();
		void AppendPoint(f3&&);
		void AppendPoints(std::vector<f3>& vecPoint);
		void AppendPoints(initialize_list<float>&&);
		void Clear();
		void SetIndices(std::vector<i3>& vecIndices);
		void SetDrawMode(EDrawMode);/// line line_strip triangle fan etc.
	private:
}

class DKEntity final:public DKBaseObject{
	public:
		DKEntity();
		~DKEntity();
		void SetMaterial(DKMaterial&);
		void AddGeometry(DKGeometry&);
	private:
}

class DKScene final:public DKBaseObject{
	public:
		void AddEntity(DKEntity*);
		void RemoveEntity(DKEntity*);
		void AddLight(DKBaseLight*);
		void RemoveLight(DKBaseLight*);
		void AddCamera(DKBaseCamera*);
		void RemoveCamera(DKBaseCamera*);
};

template<typename T>
class tpl_DKBaseNode:public HSNode{
	public:
		tpl_DKBaseNode(){
			m_ptrBaseObject.reset(new T());
		}
		tpl_DKBaseNode(const tpl_DKBaseNode<T>& ptr):m_ptrBaseObject(ptr.m_ptrBaseObject){
		}
		virtual ~tpl_DKBaseNode();
		tpl_DKBaseNode& operater=(const tpl_DKBaseNode&)=delete;
		void Update(){
			m_ptrBaseObject.Update();
		}
		shared_ptr<T> GetBaseObject(){return m_ptrBaseObject;};
		const shared_ptr<T>& GetBaseObject()const{return m_ptrBaseObject;};
	private:
		shared_ptr<T> m_ptrBaseObject;
};

template<typename T>
class tpl_DKBaseNode_rawpointer final:public HSNode{
	public:
		tpl_DKBaseNode_rawpointer()=delete;
		tpl_DKBaseNode_rawpointer(const tpl_DKBaseNode_rawpointer<T>&);
		~tpl_DKBaseNode_rawpointer();
		inline T GetBaseObject(){return m_ref_pBaseObject;}	
		inline const T GetBaseObject()const{return m_ref_pBaseObject;}	
	private:
	T m_ref_pBaseObject{nullptr};
}

template<typename T>
class DKEngineTreeNode:public tpl_DKBaseNode<T>{
	public:
		DKEngineTreeNode();

		/// sharing the same m_ptrBaseObject;
		DKEngineTreeNode(DKEngineTreeNode<T>* p):tpl_DKBaseNode(p){
			//TODO:Jerry: clone ctor.
			// copy m_matrixToParent;
			// copy description;
			m_sDisplayName=p->m_sDisplayName+"_cloned";
		}
		virtual ~DKEngineTreeNode();

	public:
		const dkchar* GetDisplayName()const{return m_sName.c_str();};
		const dkchar* GetDisplayDescription()const{return m_sDisplayDescription.c_str();};
		const glm::Matrix4x4& GetMatrixToParent()const{return m_matrixToParent;}

	protected:
		glm::Matrix4x4 m_matrixToParent;// init to uniform matrix;
		dkstr m_sDisplayName{""};
		dkstr m_sDisplayDescription{""};
};

template<typename T>
class DKReferenceNode:public HSNode{
	public:
		DKReferenceNode()=delete;
		DKReferenceNode* operater=(const DKReferenceNode&)=delete;
		DKReferenceNode(T);
		~DKReferenceNode(){
			m_ref_pReferancedNode=nullptr;
		}
		T GetReferencedNode(){return m_ref_pReferencedNode;}
		const T GetReferencedNode()const{return m_ref_pReferencedNode;}
	private:
		T m_ref_pReferencedNode{nullptr};
};


class DKCameraNode:public DKEngineTreeNode<DKCamera*>{
	public:
		DKCameraNode()=delete;
		DKCameraNode(DKCameraNode*);
		~DKCameraNode();
	public:
		void SetPosition(float x,float y,float z);
		void SetLookAt(float x,float y,float z);
	private:
		void _CalculateMatrix();// after calculation, then send matrix to render;
};

DKCameraNode::DKCameraNode(DKCameraNode* p):DKEngineTreeNode<DKCamera*>(p)
}

class DKEngineKernel final{
	public:
		DKEngineKernel();
		~DKEngineKernel();
		void Init(){
			/*
			 * -update-once-xxxx(s)
			 * -update-permanent-xxxx(s)
			 * -scenes-sA 
			 *		  -sB-lights-(s)
			 *			 -geometry-(s)
			 *			 -cameras-(s)
			 */
			//TODO:Jerry:
			m_tree.Insert(nullptr,m_nodeUpdateOnce,xxx);
			m_tree.Insert(nullptr,m_nodeUpdatePermanent,xxx);
			m_tree.Insert(nullptr,m_nodeScenes,xxx);
		}
		void Loop(){
			HSNode* _tmp{nullptr};
			/// 1. update-once nodes;
			_tmp=m_tree.Travers(&m_nodeUpdateOnce,true);
			while(_tmp){
				tpl_DKBaseNode_rawpointer<
				_tmp=m_tree.Travers(&m_nodeUpdateOnce,false);
			}

			/// 2. delete once nodes;
			/// 1. update-per... nodes;
			/// 3. render scenes
		}
		void AppendToUpdateOnce(tpl_DKBaseNode*);
	private:
		HSHierarchicalTree m_tree;
		HSNode m_nodeUpdateOnce;
		HSNode m_nodeUpdatePermanent;
		HSNode m_nodeScenes;
};
```