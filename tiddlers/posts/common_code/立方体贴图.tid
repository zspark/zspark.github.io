created: 20190818120003596
creator: Jerry
modified: 20190827172315883
modifier: Jerry
tags: [[computer graphics]] OpenGL 
title: 立方体贴图
type: text/vnd.tiddlywiki

>倘若代码和注释不一致，那么很可能两者都是错的。 -- Norm Schryer 

不常用立方体贴图，老是忘记，贴出来。


```cpp
//激活指定纹理单元；不写的话默认激活0号纹理单元；
 glActiveTexture(GL_TEXTURE1);
 //申请显卡缓存id;
 GLuint id;
 glGenTextures(1,&id);
 //指定该id所指向的显存保存立方体纹理;
 glBindTexture(GL_TEXTURE_CUBE_MAP,id);
 //设置该纹理的相关参数；
 glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_WRAP_S,GL_REPEAT);
 glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_WRAP_T,GL_REPEAT);
 glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_WRAP_R,GL_REPEAT);
 glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MIN_FILTER,GL_LINEAR);
 glTexParameteri(GL_TEXTURE_CUBE_MAP,GL_TEXTURE_MAG_FILTER,GL_LINEAR);
 //设置纹理数据；
 int w, h, c;
 unsigned char* image = stbi_load("data/textures/skybox/px.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 image = stbi_load("data/textures/skybox/nx.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_X, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 image = stbi_load("data/textures/skybox/py.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Y, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 image = stbi_load("data/textures/skybox/ny.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Y, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 image = stbi_load("data/textures/skybox/pz.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_Z, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 image = stbi_load("data/textures/skybox/nz.jpg", &w, &h, &c, 0);
 std::cout << "image size:" << w << "," << h << endl;
 glTexImage2D(GL_TEXTURE_CUBE_MAP_NEGATIVE_Z, 0, GL_RGB, w, h, 0, GL_RGB, GL_UNSIGNED_BYTE, image);
 stbi_image_free(image);
 //获取片元着色器中的立方体采样器地址；
 GLuint samperLocation=glGetUniformeLocation(program,"fSamperCube");
 //指定该采样器从具体纹理单元采样；
 glUniform1i(samperLocation,1);
 //其他..
```

[img[https://raw.githubusercontent.com/zspark/assets/blog/opengl/cube_texture.jpg]]


需要注意的是:

* 立方体纹理不必设置立方体8个顶点的纹理坐标，只需要将指定的8个顶点在空间中的正常坐标（三维的），通过顶点着色器传递给片元着色器后，使用texture函数采样即可；
* 给纹理类型填充纹理数据时不要混乱，可以熟记那个横放的十字架图，交点位置自己确定后，其他5个面顺序也就固定了； 



```
//顶点着色器：
 #version 430
 in vec4 vPosition;
 out vec3 fTexCoord

 void main(){
  //将立方体正常的顶点坐标传奇给片元着色器；
  fTexCoord=vPosition.rgb;
 }

 //片元着色器：
 #version 430
 in vec3 fTexCoord;
 uniform samplerCube fSamperCube;

 void main(){
  //立方体采样器通过texture函数正常采样；
  vec4 texColor = texture(fSamperCube,fTexCoord);
  gl_FragColor=texColor;
 }
```


