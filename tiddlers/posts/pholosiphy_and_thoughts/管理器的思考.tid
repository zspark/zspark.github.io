created: 20190818125056177
creator: Jerry
modified: 20190827144828476
modifier: Jerry
tags:  Philosophy thinking
title: 管理器的思考
type: text/vnd.tiddlywiki

最近重构了下optix渲染器的C端实现，对框架结构中“管理器”角色的定位有了进一步的理解，简单记录一下。

      管理器，顾名思义就是管理一种对象的结构，OOP中应该往往以类的形式存在，比如BufferManager，ItemManager等。拿第一个来说，它是buffer管理器，一般定义的API会出现CreateBuffer、DestroyBuffer等，而我们希望CreateBuffer存在的目的绝非仅仅是创建的中转，而是会有一定的判断逻辑在里面，比如要创建的Buffer已经有了，那么我们就仅仅返回以前的Buffer实例。

      进一步的思考是这种判断具有一定的局限性，也就是说用什么标准去判断其“已经有了”？要知道在不同的控制器（或其它什么逻辑）上判断的依据可能有所不同。在optix渲染器中以前的做法是清一色的int为键、Buffer实例为值的Map映射，这种实现确实简单粗暴，但在纹理控制器中我需要将Buffer与硬盘中图片资源的路径映射起来，方便我能在读入相同资源时，不再去创建全新的但是一模一样的Buffer。这里有个简单直接的方法就是再用一个Map映射一下URL与ID。这种实现简直让人不能接受，通过2个Map判断一个Buffer是否存在，是不是傻！？

      于是乎管理器（至少是BufferManager）需要重新审视与定位。我们可以将其作为针对部分Buffer的创建、销毁等的委托工具，而Buffer的创建从以前的必须经由BufferManager变为任何地方可以随意new的方式。也就是Buffer与BufferManager之间的耦合度降低了。具体类BufferManager可以抽象为模板，使用不同的键类型去存储。

      这样一来，没准我们可以丢弃各种管理器了，这显然行不通。被管理的对象虽然可以随意被创建，但其基本的定位不能没有。就是上面说的会有一定的判断逻辑在里面。各种控制器可以通过Manager拿到最优的Buffer再使用。
