created: 20191015045040928
creator: Jerry
modified: 20191015053109915
modifier: Jerry
tags: [[Philosophy and thoughts]]
title: 横向纵向的架构思考
type: text/vnd.tiddlywiki

软件架构的纵向指的是分层，不同的层负责不同的逻辑，层之间保持接口通信，层内部保持自己概念的完整性（当然全局概念的完整性也是必须的，层内部的概念肯定要更加细粒度）。不同的层应该严格规定该层的涉及领域与所要抽象的概念、概念的边界，则否又会沦落为每个层都会处理，边界有交叉的状态，那层的存在也就拾取的意义。

软件架构的横向指的是分模块，同一个层内部可以有不同的模块，模块更倾向于功能的集合，而不是层所涉及的概念的抽象。概念抽象应该是一批相同需求的抽象，而这个需求，不同的模块可能都会用到。层就像辅助类，不同的层有不同的功能，这些功能又是对上提供接口，对下提供封装的。

那么要实现概念抽象的目的是什么？

* 简化设计，降低设计复杂度，想想网络5层协议；
* 安全考虑，如果软件或者系统的安全性第一位的话，抽象出一个安全层肯定是有必要的；
* 方便开发与扩展：层抽象了概念（功能），使用底层的接口与自己独立实现肯定方便开发，基于安全考虑我们可以加层，基于并发可以加层（做并发处理）都是很方便的；