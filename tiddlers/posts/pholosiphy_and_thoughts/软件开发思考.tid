created: 20190911141719146
creator: Jerry
modified: 20191208093004833
modifier: Jerry
tags: [[Philosophy and thoughts]]
title: 软件开发思考
type: text/vnd.tiddlywiki

!编程规范化
编程规范始终是我最早或者是第一优先考虑的方面，我想基本上没有多少人会否定一个整齐的编程命名、一片布局清爽的程序会给他们带来不友好的阅读体验。我在意编程规范是因为它太容易实现，而且基本没有成本，另一个深层的原因是“规范”----这个更多来自主观的约束----体现的是团队整体的自我约束力与执行力，是一个可以客观判断团队能力的指标。

我经历过没有编程规范的团队，也经历过试图搞起来但“太监"的团队，回头仔细琢磨发现并非这些团队刻意不想搞这一套，而是一切都好像是非常自然的进行着。比如没有规范的团队，可能出于一锤子买卖的目的不值当干，能出结果就行；另一个“太监”的团队发现这一套搞下来又要记好多“规范”的东西，大家“心照不宣“的一致选择放弃，就像发生在梦中的事情一样，现实依然的照旧。当然也有偶尔（仅仅是偶尔）提一下的同事，大家说说笑笑、贫嘴一番也就罢了。



!架构设计
没有最好的架构，只有恰当适合的架构。整个架构的设计是以目标为前提，不知道自己要做个什么东西或者目标不明确，左摇右晃的都是做不好架构的设计的。3DGis的架构就是个“混乱大都市”（引用《恰如其分的架构》一书中的用词）。我们首先看一下业界公认的计算机软件架构的含义：

<<<
一个程序或计算系统的软件架构是系统的一种结构或一组结构，它包含软件元素、这些元素的外部可见的属性，以及元素之间的关系

“外部可见”的属性是其他元素对该元素可以做出的假定，诸如它提供的服务、执行时的特征、错误处理、共享资源的使用等。
<<<---- Len Bass、Paul Clements、Rick Kazman<br>《Software Architecture in Practice,Second Edition》

上面的“子元素”，可以说是模块，模块化是软件架构的重要内容，越是大的项目越需要架构的支持，原因就是一个人干不过来，有能力的架构师从宏观分块，设计块之间的外部可见性与最基本的指标要求（性能、内存使用等），给与块开发者足够的内部设计、实现自由度，保留开发人员对自我实现模块的成就感与团队协作感。明确模块分工也有助于紧致团队明确任务。

我认为架构师也有培养团队成员的义务，对于团队未来的发展有潜在的导向。3DGIS团队的领导希望团队中的每一个人都具有架构与多面手的能力，我认为这在当时的情况下并非正确的做法，一来软件开发刚刚起步，大家无时不刻的接受着来自设计缺陷、需求变动的挑战，此时若不抱元守一，坚守自己的一亩三分地，打好模块的基础，势必开发出更多的“三不管”与难管的代码出来，等待尾大不掉时，便是噩梦的到来；二来项目初期新功能的开发、bug的修复也是排满了成员开发的日常，若非天才级的开发者或者久经码海的老手很难驾驭大项目的整体架构走向，有时候一个概念，一个函数调用的地方就决定了架构的变化，倘若人人多面手，能力一般无二，职级骑虎相当，各有各的见解对于架构而言便是一场灾难。


!在架构约束下编程

人是有创造欲的，而架构的存在或多或少违背着这种欲望，


!设计把控
!! 职级的定位
!! 编程的经验与能力

!聚焦（闭环）
开发过程中一个很大失误之处便是不能良好的聚焦，聚焦意味着集中精力与注意力在一个点上，此时的外部一切都假定是非常完美没有任何瑕疵的，不能在一个功能的开发中隔三岔五的怀疑其他功能是否ok，这样只会分心导致不能聚焦。破坏聚焦的因素很多，有自我的也有外在的，自我方面而言，在一天中最没有精气神的时间段做开发显然不是最好的选择，带着情绪做事自然也不是上策；你一言我一语，装修叮叮咚咚，QQ微信消息响个不停等都是外在因素。

<del>不可怀疑聚焦能提高工作效率与质量，同样也能慢慢培养自己的专注力，</del>

非模块式开发对于团队成员聚焦的影响是巨大的，当你站在架构层面看待程序的时候，就像上面引用何为架构的概念所说的一样，你关注的是些结构、结构的接口与它们之间的关系，精力限制你不可能细节到具体函数的实现算法，顺着这个逻辑谁将聚焦于开发？

!管理

!沟通（交流）
沟通需要有效，程序开发中没有“心照不宣”这样的逻辑，这被称为“人类语言的鸿沟”，就是你的想法，我永远不可能完美感知，我们需要详细的沟通。

! 南京差旅总结

南京评测工作确实是一次难得的“亲密接触”大体量数据的机会，其中从数据生产到定位再到网页呈现都暴露了现有工具、引擎的缺陷：

!! 数据生产

我们目前的生产工具虽初步具有“一键式”的能力，然而其自动化程度低，期间尚需人工参与。工具问题集中在LOD的生产上，叶博封装的Simplygon有时候会出现些不便调试的奔溃。其次大量数据在生产完成后的移动（拷贝、剪贴等整理生产的数据）是个头疼的问题，数据量大、移动拷贝缓慢；


!! 模型定位

南京数据量大，建模团队也是分“区块”建模，我们在生产完成数据后，定位成了一个问题。前端功能虽实现了“多原点”，“图层偏移”这2种偏移的功能，但具体偏移多少目前还是个棘手的问题。大场景距离过大，很有可能使用相对位置建模，图层偏移是个不可或缺的功能；  


!! 引擎

* 一次性加载全部图层的索引：从表现来看，在启动网页后的一小段时间内，由于大量请求、解析索引文件导致10s左右的卡顿，然而并非所有图层的索引马上就需要用到，比如青岛2期的楼层模型，只有在专题板块才使用。飞渡加载新一批数据是在文本框中输入一个URL，然后前端就可以请求展示指定的模型，我们可以借鉴。总而言之我们需要按需加载索引的机制。

* 渲染逻辑尚不统一：部分2D的渲染依然在诸如图层（glodon_PolygonLayer)或者管理器(glodon_LayerPOIManage)类中，2/3D渲染不统一，增加开发、维护成本，尚需统一纳入渲染系统中。

* 裁剪：2D数据不曾接触，我看其渲染对象是RenderObject，其图层也是继承自Layer基类，这就完全可以用一份裁剪逻辑。

* 资源管理：索引数据与标准件模型数据还需要由资源管理器整合；

* 冗余递归/遍历：visible为false的图层依然有遍历，虽然在其中会应部分变量而退出，诸如此类的冗余循环，可在设置visible的第一时间决定是从map中移除或添加，将业务的功能的变化设计在一次性的逻辑上，而非循环的逻辑上，保持循环逻辑与openGL状态机一样的顺溜，而非不停的判断检测；

* 调试：RTree包围盒绘制为大家提供了基本的调试功能，但其开启关闭需要注释程序。

* 开发随意：虚图层是vitural_layer、更新是updata、管理器是manger，大驼峰、小驼峰混排的、空格tab混排的挺多，modelLayer、PolygonLayer命名倒也统一，但LayerWater明显不一致；文件glodon_LayerRoad.js询问无人认领，

! 魔法值引起的无数次时间损耗；
virtualLayer 写成 vitural_layer

TBC