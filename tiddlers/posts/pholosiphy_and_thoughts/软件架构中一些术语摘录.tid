created: 20191016065206545
modified: 20191016092312415
tags: sidelight
title: 软件架构中一些术语摘录
type: text/vnd.tiddlywiki

<<<
;软件架构、软件体系结构（software architecture）
:是对子系统、软件系统组件以及它们之间相互关系的描述。子系统和组件一般定义在不同的视图内，以显示软件系统的相关功能属性和非功能属性。系统的软件体系结构是一件人工制品。这是软件设计活动的结果。

;组建（component）
:是软件系统的一个封装部分。组建有一个接口。对于系统的结构，组建就像积木一样。在编程语言层次，组建可表示为模块、类、对象或是一组相关的函数。

;关系（relationship）、连接器（Connector）
:表示组件之间的连接。关系可能是静态的，也可能是动态的。静态关系可以直接用源代码显示，它们负责在体系结构内放置组建。动态关系处理临时的连接和在组建间的动态交互。从源代码的静态结构中是不易看出动态关系的。

;视图（view）
:代表一个软件体系结构的部分方面，这个部分方面专门显示一个软件系统的特定属性。

;功能属性（functional property）
:用来处理系统功能性的特定方面，并且通常与特定的功能需求相关。功能特性可以通过特定的功能使用户直接可看到应用程序，也可以通过它的实现来描述，例如用来计算功能的算法。

;非功能属性（non-functional property）
:定义了未被功能属性描述覆盖的系统特征。非功能属性通常解决与一个软件系统的可靠性、兼容性、开销、易用性、维护或者开发有关的方面。

;软件设计（software design）
:是以系统的软件体系结构为目标的软件开发者所执行的活动。我们所关心的是在给定的功能属性与非功能属性内指定软件系统的组件和组件之间的关系。

;体系结构风格（architectural style）
:根据软件系统的结构组织定义了软件系统族。体系结构风格通过组件应用的限制及其与构建有关的组成和设计规则来表现组件和组件之间的关系。

;系统族（system family）
:一组解决向私人屋的相关系统。系统族中的系统共享它们的体系结构和实现的大部分内容，这是因为每个系统都是由相同的框架得来。当单个系统随时间逐步演化时，他所发布的不同版本也建立的系统族。

;框架（framework）
:是一个试图实例化说明的部分完整的软件（子）系统。它为一个（子）系统族定义体系结构并创建它们的基本构造块。它也定义具体功能特性需要改进的地方。在面向对象的环境中框架由抽象类和具体类组成。

<<< --- 《面向模式的软件体系结构 卷一 模式系统》


<<<
软件架构的终极目标是，用最小的人力成本来满足构建与维护该系统的需求。
<<< ---《架构整洁之道》