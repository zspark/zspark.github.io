created: 20190828122810064
creator: Jerry
modified: 20190828122908170
modifier: Jerry
tags: Math
title: van der Corput 序列
type: text/vnd.tiddlywiki



我们的日常生活中使用的全部是十进制的数字，逢十进位，在计算机中也会用到二进制、十六进制，偶尔用到八进制。其他进制计算机科学也不常使用，比如三进制，七进制等。他们的转换理论肯定是一致的，也好理解。我觉得唯一需要注意的地方是如何表示，比如数字7是哪个进制的？一般情况下我们会在数字前面加上0（数字0）以表示它是个八进制数字7，前面加上0x（数字0与字母x）以表示它是个十六进制的数字7，后面加上下标2表示为二进制数字，什么都不加（默认情况）表示为最常用的十进制。进制之间的转换是计算机科学的基础知识，这里不做赘述。

总结一下就是这样（依然是数字7）：

* 二进制：$$111_2$$
* 八进制：$$07$$
* 十进制：$$7$$
* 十六进制：$$0x7$$或者$$0X7$$

 !倒根（Radical Inverse） 

<<<
想一想这么一个问题:
如何将任意一个正整数A映射到[0,1)之间，且不重复？
<<<

我们肯定不能用A除以自身，因为那样所有正整数全部映射为数字1，而且重复无穷次。你可能想到了用1除以A，这样一来虽然彼此不重复，但对于A=1的情况，其结果1不在我们想要的区间，好好想想在继续。

前辈们提出了一种方式，就是将A对着小数点做镜像，比如1（小数点在1的后面），小数点位置就是一面镜子，现在从镜子里面看数字1它依然是1，但小数点跑到了1的前面。于是1的镜像就是0.1；再看一个数字8550014，我们不赘述，镜像后是0.4100558；其他进制的数字是一样的，比如二进制数字$$110100111_2$$，镜像后是$$0.111001011_2$$。

''下班了，回见！''
